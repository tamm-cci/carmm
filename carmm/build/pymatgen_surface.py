def generate_pymatgen_surface(bulk_model, layers=2, symmetric=True, miller_index=(1,0,0), vacuum=20, spin=False,
							  save=False, tol=0.01, path='./', file_format='in'):
	'''

	Function to create slab models for different facets using pymatgen. This is particularly useful to create slabs
	for multi component bulk like oxides, sulphides, pervoskites, etc. In such cases, a given facet can have
	multiple terminations and this functionality enumerates over all possible terminations. For example, a metal oxide
	having formula MO can have an M-termination or an O-termination.

	Parameters:

	bulk_model: Atoms object
		provide the unit cell and make sure this is the conventional bulk unit cell
	layers: int
		specify the repeating layers along the direction perpendicular to the plane of the desired facet. This basically
		defines the thickness of the slab.
		Note: It is important to note that the definition of a layer in pymatgen depends on the primitive slab unit cell
		and does not represent an atomic layer (like ASE). Please check the thickness the slab generated using this
		functionality and make sure it is as desired before running any calculations.
	symmetric: boolean
		Whether you want the slab model to be symmetric. Note: this parameter should always be set to 'True' (unless
		asymmetric slabs are needed in special cases) as Tasker classification states that asymmetric slabs are inherently
		unstable.
	miller_index: tuple
		specify facet required as a tuple
	vacuum: float
		specifies the vacuum addition to the slab in the direction of 'axis-' of the 'center' function
	spin: boolean
		specify whether the bulk geometry Atoms object has specified spin moments on atoms
	save: boolean
		specifies whether the generated surfaces should be saved as .in files. If set to True, the
		function will save the generated files in different folder. Each folder will have a slab model which
		corresponds to a given slab thickness (layers), termination and symmetry. The folder name will have the format
		{symmetric}_slab_{termination}_{n}_layers
	tol: float
		the tolerance value decides how many terminations are generated for a given facet. A very small value of tolerance
		(for example 0.001) can lead to unphysical terminations. In most cases, the value 0.01 is sufficient to enumerate
		over all terminations.
	path: str
		path to save the folders for slabs
	file_format: str
		specify the file format for saving the slab model. Note that the format provided has to be compatible with ASE
		file io writer. Please check ASE's documentation for supported file format.

	'''

	from ase.io import read
	from ase.build import surface, make_supercell
	from pymatgen.io.ase import AseAtomsAdaptor
	from pymatgen.core.surface import SlabGenerator
	structure = AseAtomsAdaptor.get_structure(bulk_model)
	charge_list = list(bulk_model.get_initial_charges())
	structure.add_oxidation_state_by_site(charge_list)
	if spin:
		spin_list = list(bulk_model.get_initial_magnetic_moments())
		structure.add_spin_by_site(spin_list)
	slabgen = SlabGenerator(structure, miller_index=miller_index,
							min_slab_size=layers,
							min_vacuum_size=vacuum,
							center_slab=True, in_unit_planes=True, lll_reduce=True)
	slabs = slabgen.get_slabs(ftol=tol, symmetrize=symmetric)
	for j in range(len(slabs)):
		surface = AseAtomsAdaptor.get_atoms(slabs[j].get_orthogonal_c_slab())
		surface.center(vacuum=vacuum, axis=2)
		surface.wrap()
		if save:
			_save(surface, symmetric, layers, j, path, file_format)

	return slabs

def _save(surface, symmetric, layers, termination, path, file_format='in'):
	'''
	Method to save the generated slab models to a .in file by creating different folders for different terminations and
	thickness; hidden from user

	Parameters:

	surface: Atoms
		Atoms object for the slab model generated by pymatgen_surface functionality
	symmetric: boolean
		specifies whether the slab is symmetric or not
	layers: int
		specifies the number of layers in the slab
	termination:
		specifies the termination. This is by default just an integer and does not reveal any chemical nature of the
		termination. Please check the actual .in files to see if correct terminations are generated.
	'''

	from ase.io import write
	import os
	if symmetric == True:
		symmetry = 'sym'
	else:
		symmetry = 'asym'
	if os.path.exists(f'{path}/{symmetry}_slab{termination}_{layers}_layer'):
		import shutil
		shutil.rmtree(f'{path}/{symmetry}_slab{termination}_{layers}_layer')
	os.mkdir(f'{path}/{symmetry}_slab{termination}_{layers}_layer')
	try:
		surface.write(f'{path}/{symmetry}_slab{termination}_{layers}_layer/geometry.{file_format}')
	except Exception as e: # pragma: no cover
		print(e) # pragma: no cover
		print('The error might be due to unsupported file format. Please check ASE\'s documentation for supported file format.') # pragma: no cover
