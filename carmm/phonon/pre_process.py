def make_displaced_supercells(atoms_object, supercell_size:[1,1,1], displacement: 0.01):
    """ Generate supercells with small atomic displacements for phonon calculations using the finite-displacement method.

    Parameters ----------
    atoms_object : ase.Atoms
        An ASE `Atoms` object that defines the unit cell and atomic positions.
    supercell_size : list of int
        The supercell expansion along each lattice vector, given as a list of three integers [nx, ny, nz].
        Default is [1, 1, 1], i.e. no expansion.
    displacement : float
        Magnitude of the Cartesian displacement (in Å) applied. Default is 0.01 Å.

    Returns -------
    determinant
        Determinant of the supercell (i,e volume of the supercell w.r.t ot the unit cell provided). This is need so that
        the moments and charges are correctly appended to the supercell atoms.

     supercells
        A list of supercell displaced structures as a phonopy supercell object. The number of displaced structures depends
        on the symmetry of the unit cell.

    Notes ----- This function is commonly used in finite-displacement phonon calculations, where forces from displaced
    supercells are combined to build the dynamical matrix. """


    import numpy as np
    from phonopy import Phonopy
    from phonopy.interface.calculator import read_crystal_structure
    import yaml
    from yaml import CLoader as Loader

    sup_matrix = np.diag(supercell_size)
    print(sup_matrix.shape)
    atoms_object.write('geometry_eq.in')
    unitcell, optional_structure_info = read_crystal_structure("geometry_eq.in", interface_mode='aims')
    det = np.round(np.linalg.det(sup_matrix))
    phonon = Phonopy(unitcell, supercell_matrix=sup_matrix)

    phonon.generate_displacements(distance=displacement)
    supercells = phonon.supercells_with_displacements
    phonon.save('phonopy_disp.yaml')
    stream = open("phonopy_disp.yaml", 'r')
    dictionary = yaml.load(stream, Loader)
    stream.close()
    dictionary['phonopy'].update([('calculator', 'aims'), ('configuration', {'create_displacements': '".true."', 'dim':
        f'{supercell_size[0]} {supercell_size[1]} {supercell_size[2]}', 'calculator': '"aims"'})])
    # dictionary['physical_unit'].update([('length', '"angstrom"'), ('force_constants', '"eV/angstrom^2"')])
    with open('phonopy_disp.yaml', 'w') as f:
        data = yaml.dump(dictionary, f, sort_keys=False)

    return det, supercells


def get_charges_and_moments(determinant, atoms_object):
    """
    The function extracts the charges and moments of atoms from the unit cell Atoms object and then generates a list of
    charges and moments for the supercell. The determinant obtained from make_displaced_supercells function is used
    here to make sure the charges and moments in the appended in the right order.

    Parameters
    ----------
    determinant : int
        determinant of the supercell matrix obtained from the make_displaced_supercells function.
    atoms_object : ase.Atoms
        Atomic structure providing element types, positions, and unit cell
        information.

    Returns
    -------
    moments : list
        list of magnetic moments on atoms of the supercell
    charges : list
        list of charges on atoms of the supercell

    """

    charges_sup = []
    moments_sup = []

    charges = atoms_object.get_initial_charges()
    moments = atoms_object.get_initial_magnetic_moments()

    for i in range(len(atoms_object)):
        for j in range(int(determinant)):
            charges_sup.append(charges[i])
            moments_sup.append(moments[i])

    return moments_sup, charges_sup


def creating_files_and_directories(supercells, charges, moments):
    """
    Create directories and write geometry files for each displaced supercell
    containing structural information.

    Parameters
    ----------
    supercells :
        A list of supercell displaced structures as a phonopy supercell object generated by make_displaced_supercells
        function. The number of displaced structures depends on the symmetry of the unit cell.
    moments : list
        list of magnetic moments for atoms of the supercell obtained from get_charges_and_moments.
    charges : list
        list of charges for atoms of the supercell obtained from get_charges_and_moments.

    Returns
    -------
    None
        This function creates directories and writes files to disk but does
        not return any value.

    Notes
    -----
    - The directory structure is typically one folder per displaced supercell, named
      systematically (e.g., `disp-001`, `disp_002`, ...).
    - Files include structural data (e.g., .in file), input.py file for first-principles calculation and a
    submission script for submitting the calculation on a supercomputer.
    """

    import os
    import shutil
    from phonopy.interface.calculator import write_crystal_structure
    from ase.io import read
    for ind, sup in enumerate(supercells):
        write_crystal_structure(f"geometry_{ind+1:03}.in", supercells[ind], interface_mode='aims')
        atoms = read(f"geometry_{ind+1:03}.in")
        atoms.set_initial_charges(charges)
        atoms.set_initial_magnetic_moments(moments)
        directory = f"disp-{ind+1:03}"
        parent_dir = os.getcwd()
        path_final = os.path.join(parent_dir, directory)
        if os.path.exists(path_final):
            shutil.rmtree(path_final)
        os.mkdir(path_final)
        atoms.write(path_final + '/geometry.in')
        shutil.copy(parent_dir + '/input.py', path_final + '/input.py')
        shutil.copy(parent_dir + '/submission.script', path_final + '/submission.script')
        os.chdir(parent_dir)
        os.remove(f"geometry_{ind+1:03}.in")
